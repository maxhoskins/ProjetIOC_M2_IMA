/**
 * 
 */
package hoskins.viaud.poc.metaheuristic;

import hoskins.viaud.poc.heuristic.SampleHeuristic;
import hoskins.viaud.poc.localsearch.LocalSearch;
import hoskins.viaud.poc.localsearch.PathRelinking;
import hoskins.viaud.poc.metaheuristic.msea.ElitePool;
import hoskins.viaud.poc.metaheuristic.msea.PostOptimization;
import hoskins.viaud.poc.structure.Solution;

/**
 * Run a Multi-Start Evolutionnary Algorithm (MSEA) with Path-Relinking as meta-heuristic for the problem
 * Start from a pool of solution (generated by GRASP) and perform a path-relinking method on each solution in the pool
 * Keep the best new solution on the path from two solutions in the pool
 * Check if the new solution is a candidate to integrate the pool of solutions
 * Repeat the procedure during a number of iterations
 * @author Maxim HOSKINS and Quentin VIAUD
 *
 */
public class MSEA implements MetaHeuristic {

	/* (non-Javadoc)
	 * @see hoskins.viaud.poc.metaheuristic.MetaHeuristic#performMetaHeuristic(hoskins.viaud.poc.structure.Solution)
	 */
	@Override
	public Solution performMetaHeuristic(Solution s, int nbIterations, Object ... params) {
		return runMetaHeuristic(s, nbIterations, (int)params[0]);
	}
	
	/**
	 * Run MSEA algorithm
	 * @param heuristicSol heuristic solution
	 * @param maxIte maximum number of iterations
	 * @param eliteSize max size of the pool
	 * @return new solution 
	 */
	private Solution runMetaHeuristic(Solution heuristicSol, int maxIte, int eliteSize){

		//Initialize necessary objects and variables
		ElitePool elitePool = new ElitePool(eliteSize);
		LocalSearch pathRelinking = new PathRelinking();
		PostOptimization postOptimization = new PostOptimization();

		Solution s1, s2;
		
		//Add heuristic solution to pool
		if(heuristicSol.isFeasible())
			elitePool.addSolution(heuristicSol);
		
		/* Algorithm pseudo code
		 * for i = 1 to maxIte do
		 *	 S1 randomizedBuild() (includes LocalSearch);
		 *	 S2  select(elitePool,S);
		 *	 if (S2 != NULL) then
		 *	    S2  pathRelinking(S1,S2);
		 *		add(elitePool,S2);
		 *	 endif
		 *	 add(elitePool,S1);
		 * endfor
		 */
		for (int i = 0; i < maxIte; i++){
			s1 = SampleHeuristic.performHeuristic();	

			s2 = elitePool.selectSolution(s1);
			if(s2 != null){
				s2 = pathRelinking.performLocalSearch(s1, s2);
				elitePool.addSolution(s2);
			}

			elitePool.addSolution(s1);
		}
		
		// Do not run post optimization if the pool only has one solution
		if(elitePool.getPool().size()==1)
			s1 = elitePool.getPool().get(0);
		else
			s1 = postOptimization.performPostOptimization(elitePool);	
	
		return s1;
	}
}
